#+TITLE: Emacs Config
#+AUTHOR: M
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+DESCRIPTION: Emacs config with bits and pieces taken from many places
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Table of Contents :TOC:
- [[#load-scripts][Load scripts]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
- [[#settings][Settings]]
  - [[#sane-defaults][Sane Defaults]]
  - [[#backup][Backup]]
  - [[#theme][Theme]]
  - [[#line-numbers][Line numbers]]
- [[#dired][Dired]]
  - [[#macro-to-bind-keys][Macro to bind keys]]
- [[#org-mode][ORG Mode]]
  - [[#org-face-customization][Org Face customization]]
  - [[#org-tempo][Org-Tempo]]
  - [[#toc-org][Toc-Org]]
- [[#evil][Evil]]
  - [[#general][General]]
- [[#nix-mode][Nix mode]]
- [[#need-to-break-this-up][Need to break this up]]

* Load scripts
Code that won't be modified is put in scrips found in "~/.config/emacs/scrips

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/scripts/")
#+end_src

** Sourcing the scripts
#+begin_src emacs-lisp
(require 'straight-setup)  ;; The Straight Package Manager
(require 'buffer-move)   ;; Buffer-move for better window management
#+end_src

* Settings
** Sane Defaults 
#+begin_src emacs-lisp
; Deals with newline behavior: if -1 acts like I would expect. If on newline without intend is enter with c-j
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
(setq inhibit-startup-message t)
(setq initial-buffer-choice t) ;; Always start with scratch buffer
(scroll-bar-mode -1)        ; no visible scrollbaar
;(tool-bar-mode -1)         ; no toolbar
(tooltip-mode -1)           ; no tooltips
;(set-fringe-mode 10)       ;
(set-fringe-mode 0)         ; 
(menu-bar-mode -1)          ; no file menu
(tool-bar-mode -1)          ; no tool bar
(setq use-dialog-box nil)   ; no dialog boxes (GUI)
;; set time in modeline
(setq 
 display-time-day-and-date t
 display-time-format "%a %d %b, %H:%M")
(setq-default cursor-type 'box)
(setq blink-cursor-mode t)
;;; https://protesilaos.com/emacs/dotemacs#h:d3684ec0-a972-4033-a4d6-41ee16e891d9
(add-hook 'text-mode-hook #'turn-on-auto-fill)
;; Auto-refresh dired on file change
(add-hook 'dired-mode-hook 'auto-revert-mode)
#+end_src
** Backup
By default, Emacs creates automatic backups of files in their original
directories, such "file.el" and the backup "file.el~". This leads to a
lot of clutter, so let’s tell Emacs to put all backups that it creates
in the TRASH directory.
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
#+end_src
** Theme
#+begin_src emacs-lisp
;; Custom theme path
(add-to-list 'custom-theme-load-path "~/.config/emacs/themes")
;; Declare all themes as safe
(setq custom-safe-themes t)

;;; Doom themes
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t)) ; if nil, italics is universally disabled
;;   (load-theme 'doom-earl-grey t)
;; (load-theme 'doom-flatwhite t)
;; load flatwhite/earl-grey then monotropic
(use-package monotropic-theme)
;(load-theme 'monotropic t)

;;prot themes
(use-package ef-themes)
;; (load-theme 'ef-light)
(use-package standard-themes)
;;(load-theme 'standard-light)
(use-package modus-themes)

(load-theme 'modus-operandi-tinted)

;;; Theme buffet
;;; I need to figure out how to make this NOT override custom face settings
;(use-package theme-buffet
;  :init
;  (setq theme-buffet-menu 'modus-ef)
;  :config
;  (theme-buffet-modus-ef)
;  (theme-buffet-timer-mins 30)
;  (theme-buffet-a-la-carte))

;(use-package theme-buffet
;  :after (modus-themes ef-themes)
;  :init
;  (setq theme-buffet-menu 'end-user)
;  (setq theme-buffet--end-user
;    '(:night      (modus-vivendi ef-dark ef-winter ef-autumn ef-night ef-duo-dark ef-symbiosis)
;      :morning    (modus-operandi ef-light ef-cyprus ef-spring ef-frost ef-duo-light)
;      :afternoon  ( modus-operandi-tinted ef-arbutus ef-day ef-kassio ef-summer ef-elea-light ef-maris-light ef-melissa-light ef-trio-light)
;      :evening    (modus-vivendi-tinted ef-rosa ef-elea-dark ef-maris-dark ef-melissa-dark ef-trio-dark)))
;  (theme-buffet-timer-mins 15))

#+end_src
** Line numbers
#+begin_src emacs-lisp

;(global-visual-line-mode t)  ;; line wrap
;(diminish 'visual-line-mode) ;; diminish Wrap
;(column-number-mode)
(global-display-line-numbers-mode t)
;; (setq menu-bar-display-line-numbers-mode 'relative)
(setq linum-relative-current-symbol "")
;;;
;; set type of line numbering (global variable)
(setq display-line-numbers-type 'relative) 

;; activate line numbering in all buffers/modes
(global-display-line-numbers-mode) 

;; Disable line numbers for some modes
(dolist (mode '(;org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook
		circe-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

* Dired
#+begin_src emacs lisp
;; https://protesilaos.com/codelog/2023-06-26-emacs-file-dired-basics/
;; This works with `file-name-shadow-mode' enabled.  When you are in
;; a sub-directory and use, say, `find-file' to go to your home '~/'
;; or root '/' directory, Vertico will clear the old path to keep
;; only your current input.
(add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)

;; Do not outright delete files.  Move them to the system trash
;; instead.  The `trashed' package can act on them in a Dired-like
;; fashion.  I use it and can recommend it to either restore (R) or
;; permanently delete (D) the files.
(setq delete-by-moving-to-trash t)

;; When there are two Dired buffers side-by-side make Emacs
;; automatically suggest the other one as the target of copy or rename
;; operations.  Remember that you can always use M-p and M-n in the
;; minibuffer to cycle through the history, regardless of what this
;; does.  (The "dwim" stands for "Do What I Mean".)
(setq dired-dwim-target t)
#+end_src

** Macro to bind keys
Taken from Prot:
 https://protesilaos.com/emacs/dotemacs#h:d3684ec0-a972-4033-a4d6-41ee16e891d9
 This Lisp macro does not try to be too smart. It simply reduces the
 typing we have to do to define key bindings. As with the underlying
 define-key function, it can bind a key sequence to a command, a nil
 value, or even a keymap. The constraint it imposes is that the
 arguments supplied to it as an even number and the odd ones are key
 bindings (strings that can be passed to the kbd function). This means
 that it does not try to cover the case of [remap COMMAND]
#+begin_src emacs-lisp
(defmacro my-keybind (keymap &rest definitions)
  "Expand key binding DEFINITIONS for the given KEYMAP.
DEFINITIONS is a sequence of string and command pairs."
  (declare (indent 1))
  (unless (zerop (% (length definitions) 2))
    (error "Uneven number of key+command pairs"))
  (let ((keys (seq-filter #'stringp definitions))
        ;; We do accept nil as a definition: it unsets the given key.
        (commands (seq-remove #'stringp definitions)))
    `(when-let (((keymapp ,keymap))
                (map ,keymap))
       ,@(mapcar
          (lambda (pair)
            (let* ((key (car pair))
                   (command (cdr pair)))
              (unless (and (null key) (null command))
                `(define-key map (kbd ,key) ,command)))) ; perhaps this could use `keymap-set` instead
          (cl-mapcar #'cons keys commands)))))


;; Sample of `prot-emacs-keybind'

;; (prot-emacs-keybind global-map
;;   "C-z" nil
;;   "C-x b" #'switch-to-buffer
;;   "C-x C-c" nil
;; ;; Notice the -map as I am binding keymap here, not a command:
;;   "C-c b" beframe-prefix-map
;;   "C-x k" #'kill-buffer)

(my-keybind global-map
  "M-g g" #'consult-goto-line)


#+end_src

* ORG Mode

** Org Face customization
Need to customize this more, taken from here https://emacs.stackexchange.com/a/75240

#+begin_src emacs-lisp
(defun my-org-faces ()
    (set-face-attribute 'org-level-1 nil :height 1.75)
    (set-face-attribute 'org-level-2 nil :height 1.5))

(add-hook 'org-mode-hook #'my-org-faces)

#+end_src

** Org-Tempo
Org-tempo is not a separate package but a module within org that can
be enabled. Org-tempo allows for '<s' followed by TAB to expand to a
begin_src tag. Other expansions available include:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src

** Toc-Org
Allows us to create a Table of Contents in our Org docs.

#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

* Evil
#+begin_src emacs-lisp

; (use-package evil
;   :init
;   (setq evil-want-integration t)
;   (setq evil-want-keybinding nil)
; ;;  (setq evil-want-C-u-scroll t)
; ;;  (setq evil-want-C-i-jump nil)
;   (setq evil-undo-system 'undo-redo) ;; Adds vim-like C-r redo functionality
; ;;  (setq evil-undo-system 'undo-fu) ;; I liked this if above doesn't work well
;   (setq evil-vsplit-window-right t)
;   (setq evil-split-window-below t)
;   ;; keeps all modes with box cursor
;   (setq evil-operator-state-cursor 'box)
;   (setq evil-emacs-state-cursor 'box)
;   (setq evil-replace-state-cursor 'box)
;   (setq evil-visual-state-cursor 'box)
;   (setq evil-normal-state-cursor 'box)
;   (setq evil-insert-state-cursor 'box)
;   (setq evil-motion-state-cursor 'box)
;   :config
;   (evil-mode 1)
; ;;  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
; ;;  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
; 
;   ;; Use visual line motions even outside of visual-line-mode buffers
;   ;;(evil-global-set-key 'motion "j" 'evil-next-visual-line)
;   ;;(evil-global-set-key 'motion "k" 'evil-previous-visual-line)
; 
;    (evil-set-initial-state 'messages-buffer-mode 'normal)
;    (evil-set-initial-state 'dashboard-mode 'normal)
;    (evil-set-initial-state 'pdf-view-mode 'emacs)
;    (add-hook 'pdf-view-mode-hook
;    (lambda ()
;      (set (make-local-variable 'evil-emacs-state-cursor) (list nil)))))
; 
; ;; Using RETURN to follow links in Org/Evil 
; ;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
; (with-eval-after-load 'evil-maps
;   (define-key evil-motion-state-map (kbd "SPC") nil)
;   (define-key evil-motion-state-map (kbd "RET") nil)
;   (define-key evil-motion-state-map (kbd "TAB") nil))
; ;; Setting RETURN key in org-mode to follow links
;   (setq org-return-follows-link  t)
; 
; 
; 
; (use-package evil-collection
;   :after evil
;   :config
;   (evil-collection-init))
; (diminish 'evil-collection-unimpaired-mode) ;; diminish unimpaired mode

#+end_src

** General
#+begin_src emacs-lisp

;;; General Keybinds
;(use-package general
;  :config
;  (general-evil-setup t)
;
;  ;; set up 'SPC' as the global leader key
;  (general-create-definer m/leader-keys
;    :states '(normal insert visual emacs)
;    :keymaps 'override
;    :prefix "SPC" ;; set leader
;    :global-prefix "C-SPC") ;; access leader in insert mode
;
;  (m/leader-keys
;    "b" '(:ignore t :wk "buffer")
;    "b b" '(switch-to-buffer :wk "Switch buffer") ;; this doesn't work
;;;    "b i" '(counsel-ibuffer :wk "Ibuffer")
;    "b k" '(kill-this-buffer :wk "Kill this buffer")
;    "b n" '(next-buffer :wk "Next buffer")
;    "b p" '(previous-buffer :wk "Previous buffer")
;    "b r" '(revert-buffer :wk "Reload buffer")))
;
;
;(m/leader-keys
;  "TAB TAB" '(comment-line :wk "Comment Lines")
;;;  "."       '(counsel-find-file     :wk "Find File")
;  )



;;; sudo edit
;(use-package sudo-edit
;  :config
;    (m/leader-keys
;      "f u" '(sudo-edit-find-file :wk "Sudo find file")
;      "f U" '(sudo-edit :wk "Sudo edit file")))

;;; MPC
;(m/leader-keys
;  "m" '(:ignore t :wk "MPC")
;  "m SPC" '(mpc-toggle-play :wk "Toggle Play") ;; this doesn't work
;  "m s" '(mpc-toggle-shuffle :wk "Toggle Shuffle ")
;  "m n" '(mpc-next :wk "Next")
;  "m p" '(mpc-prev :wk "Previous"))

#+end_src

* Nix mode

#+begin_src emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'"
  :hook (nix-mode . lsp-deferred))

#+end_src


* Need to break this up

#+begin_src emacs-lisp
; Majority of this taken from emacs from scratch
; Font var
;(defvar m/default-font-size 133)
;(defvar m/default-variable-font-size 133)
;(set-face-attribute 'default nil :font "Monospace" :height m/default-font-size)
;; variable width font
;(set-face-attribute 'variable-pitch nil :font "Equity Text B" :height m/default-font-size :weight 'regular)


; you can select text and delete it by typing.
(delete-selection-mode 1)
(setq blink-cursor-mode t)

;; Move customization variables to a separate file and load it (silently)
(setq custom-file (locate-user-emacs-file "custom-vars.el"))
(load custom-file 'noerror 'nomessage)


;(setq x-super-keysym 'meta) ;; change meta from alt to super
;(global-set-key (kbd "<escape>") 'keyboard-escape-quit) ;; escape exit prompts


;; expand region
(use-package expand-region
  :bind ("C-=" . er/expand-region))




(use-package diminish)

(diminish 'eldoc-mode) ;; diminish ElDoc


(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))




;;; counsel stuff
;;(use-package counsel
;;  :bind (("M-x" . counsel-M-x)
;;         ("C-x b" . counsel-ibuffer)
;;         ("C-x C-f" . counsel-find-file)
;;	 ("C-M-a" . 'counsel-switch-buffer)
;;         :map minibuffer-local-map
;;         ("C-r" . 'counsel-minibuffer-history)))



;;(use-package helpful
;;  :custom
;;  (counsel-describe-function-function #'helpful-callable)
;;  (counsel-describe-variable-function #'helpful-variable)
;;  :bind
;;  ([remap describe-function] . counsel-describe-function)
;;  ([remap describe-command] . helpful-command)
;;  ([remap describe-variable] . counsel-describe-variable)
;;  ([remap describe-key] . helpful-key))



;;(use-package ivy
;;  :diminish
;;  :bind (("C-s" . swiper)
;;         :map ivy-minibuffer-map
;;         ("TAB" . ivy-alt-done)
;;         ("C-l" . ivy-alt-done)
;;         ("C-j" . ivy-next-line)
;;         ("C-k" . ivy-previous-line)
;;         :map ivy-switch-buffer-map
;;         ("C-k" . ivy-previous-line)
;;         ("C-l" . ivy-done)
;;         ("C-d" . ivy-switch-buffer-kill)
;;         :map ivy-reverse-i-search-map
;;         ("C-k" . ivy-previous-line)
;;         ("C-d" . ivy-reverse-i-search-kill))
;;  :config
;;  (ivy-mode 1))
;;
;;
;;; displays extra info about whats in the list
;;(use-package ivy-rich
;;  :init
;;  (ivy-rich-mode 1))
;;
;;;; ivy integration with pass
;;(use-package ivy-pass)


; displays what the entered keycombo can do
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 3))










(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))




;; from munen/emacs.d

;; Sentences have one space after a period
(setq sentence-end-double-space nil)
;; Confirm before closing Emacs
(setq confirm-kill-emacs 'y-or-n-p)
;; dired-mode
;; Ability to use `a` to visit a new directory insteat of RET, in same buffer
(put 'dired-find-alternate-file 'disabled nil)
;; Human readable units
(setq-default dired-listing-switches "-alh")
;; On `C`, recursively copy by default
(setq dired-recursive-copies 'always)
;; Ask `y/n` instead of `yes/no`
(fset 'yes-or-no-p 'y-or-n-p)
;; Auto revert files on change
(global-auto-revert-mode t)
;; Shortcut for changing font-size
(defun zoom-in ()
  (interactive)
  (let ((x (+ (face-attribute 'default :height)
              10)))
    (set-face-attribute 'default nil :height x)))

(defun zoom-out ()
  (interactive)
  (let ((x (- (face-attribute 'default :height)
              10)))
    (set-face-attribute 'default nil :height x)))

(define-key global-map (kbd "C-1") 'zoom-in)
(define-key global-map (kbd "C-0") 'zoom-out)


;(setq display-time-default-load-average nil)
;(setq display-time-24hr-format 1)
;(display-time-mode t)



;; windmove with shift + arrowkeys
;(when (fboundp 'windmove-default-keybindings)
;  (windmove-default-keybindings))


;; PDF export
(defun md-compile ()
  "Compiles the currently loaded markdown file using pandoc into a PDF"
  (interactive)
  (save-buffer)
  (shell-command (concat "panrun " (buffer-file-name))))

(defun update-other-buffer ()
  (interactive)
  (other-window 1)
  (revert-buffer nil t)
  (other-window -1))

(defun md-compile-and-update-other-buffer ()
  "Has as a premise that it's run from a markdown-mode buffer and the
   other buffer already has the PDF open"
  (interactive)
  (md-compile)
  (update-other-buffer))


(eval-after-load 'markdown-mode
  '(define-key markdown-mode-map (kbd "C-c r") 'md-compile-and-update-other-buffer))


(use-package pinentry
  :config
  (setq epa-pinentry-mode 'loopback)
  (pinentry-start))


(use-package password-store)

;;; pdf-tools tweaks: https://pragmaticemacs.wordpress.com/2017/11/08/more-pdf-tools-tweaks/
 (use-package pdf-tools
   :mode ("\\.pdf\\'" . pdf-view-mode)
   :hook
   (pdf-view-mode . (lambda () (display-line-numbers-mode -1)))
   :config
   (pdf-tools-install)
   ;(setq-default pdf-view-display-size 'fit-page)
   ;; automatically annotate highlights
   (setq pdf-annot-activate-created-annotations t)
   ;; stolen from SirPscl/emacs.d - zoom by 5%
   (setq pdf-view-resize-factor 1.05)
   ;; don't use swiper
   (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))

(use-package markdown-mode
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown")
  :config
  (setq markdown-command "pandoc"))


(show-paren-mode t) ;; enable show paren mode
(setq show-paren-style 'expression) ;; highlight whole expression
 (use-package paren-face
  :hook (emacs-lisp-mode . paren-face-mode))


;; function to start magit on dotfiles
(defun dotfiles-magit-status ()
  (interactive)
  (add-to-list 'magit-git-global-arguments dotfiles-git-dir)
  (add-to-list 'magit-git-global-arguments dotfiles-work-tree)
  (call-interactively 'magit-status))
(global-set-key (kbd "C-c C-d") 'dotfiles-magit-status)

;; wrapper to remove additional args before starting magit
(defun magit-status-with-removed-dotfiles-args ()
  (interactive)
  (setq magit-git-global-arguments (remove dotfiles-git-dir magit-git-global-arguments))
  (setq magit-git-global-arguments (remove dotfiles-work-tree magit-git-global-arguments))
  (call-interactively 'magit-status))
;; redirect global magit hotkey to our wrapper
(global-set-key (kbd "C-x g") 'magit-status-with-removed-dotfiles-args)
;; everything works without this?
;;(define-key magit-file-mode-map (kbd "C-x g") 'magit-status-with-removed-dotfiles-args)

;; I can't figure out how to custsomize it but =C-c C-a= runs TeX-command-run-all and that compiles the tex file
(use-package tex-site
  :straight auctex)



;; Set pdf-tools as default http://alberto.am/2020-04-11-pdf-tools-as-default-pdf-viewer.html

(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t)

(add-hook 'TeX-after-compilation-finished-functions
          #'TeX-revert-document-buffer)
(setq-default TeX-engine 'luatex)



;; MPC keybinds taken from here https://www.emacswiki.org/emacs/Mpc#h5o-2
 (add-hook 'mpc-mode-hook
  (lambda ()
    (keymap-local-set "C-<return>" 'mpc-play-at-point)
    (keymap-local-set "<SPC>"      'mpc-toggle-play)
    (keymap-local-set "s"          'mpc-toggle-shuffle)
    (keymap-local-set "p"          'previous-line)
    (keymap-local-set "n"          'mpc-next)
    (keymap-local-set "p"          'pc-prev)))





;(use-package mixed-pitch
;  :diminish
;  :init
;  (add-hook 'org-mode-hook 'mixed-pitch-mode 1))


;; Taken from: protesilaos.com/codelog/2024-02-17-emacs-modern-minibuffer-packages/ ;;

;; The `vertico' package applies a vertical layout to the minibuffer.
;; It also pops up the minibuffer eagerly so we can see the available
;; options without further interactions. This package is very fast
;; and "just works", though it also is highly customisable in case we
;; need to modify its behaviour.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:cff33514-d3ac-4c16-a889-ea39d7346dc5
(use-package vertico
  :config
  (setq vertico-cycle t)
  (setq vertico-resize nil)
  (vertico-mode 1))

;; The `marginalia' package provides helpful annotations next to
;; completion candidates in the minibuffer. The information on
;; display depends on the type of content. If it is about files, it
;; shows file permissions and the last modified date. If it is a
;; buffer, it shows the buffer's size, major mode, and the like.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:bd3f7a1d-a53d-4d3e-860e-25c5b35d8e7e
(use-package marginalia
  :config
  (marginalia-mode 1))

;; The `orderless' package lets the minibuffer use an out-of-order
;; pattern matching algorithm. It matches space-separated words or
;; regular expressions in any order. In its simplest form, something
;; like "ins pac" matches `package-menu-mark-install' as well as
;; `package-install'. This is a powerful tool because we no longer
;; need to remember exactly how something is named.
;;
;; Note that Emacs has lots of "completion styles" (pattern matching
;; algorithms), but let us keep things simple.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:7cc77fd0-8f98-4fc0-80be-48a758fcb6e2
(use-package orderless
  :config
  (setq completion-styles '(orderless basic)))

;; The `consult' package provides lots of commands that are enhanced
;; variants of basic, built-in functionality. One of the headline
;; features of `consult' is its preview facility, where it shows in
;; another Emacs window the context of what is currently matched in
;; the minibuffer. Here I define key bindings for some commands you
;; may find useful. The mnemonic for their prefix is "alternative
;; search" (as opposed to the basic C-s or C-r keys).
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:22e97b4c-d88d-4deb-9ab3-f80631f9ff1d
(use-package consult
  :bind (;; A recursive grep
         ("M-s M-g" . consult-grep)
         ;; Search for files names recursively
         ("M-s M-f" . consult-find)
         ;; Search through the outline (headings) of the file
         ("M-s M-o" . consult-outline)
         ;; Search the current buffer
         ("M-s M-l" . consult-line)
         ;; Switch to another buffer, or bookmarked file, or recently
         ;; opened file.
         ("M-s M-b" . consult-buffer)))

;; The `embark' package lets you target the thing or context at point
;; and select an action to perform on it. Use the `embark-act'
;; command while over something to find relevant commands.
;;
;; When inside the minibuffer, `embark' can collect/export the
;; contents to a fully fledged Emacs buffer. The `embark-collect'
;; command retains the original behaviour of the minibuffer, meaning
;; that if you navigate over the candidate at hit RET, it will do what
;; the minibuffer would have done. In contrast, the `embark-export'
;; command reads the metadata to figure out what category this is and
;; places them in a buffer whose major mode is specialised for that
;; type of content. For example, when we are completing against
;; files, the export will take us to a `dired-mode' buffer; when we
;; preview the results of a grep, the export will put us in a
;; `grep-mode' buffer.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:61863da4-8739-42ae-a30f-6e9d686e1995
(use-package embark
  :bind (("C-." . embark-act)
         :map minibuffer-local-map
         ("C-c C-c" . embark-collect)
         ("C-c C-e" . embark-export)))

;; The `embark-consult' package is glue code to tie together `embark'
;; and `consult'.
(use-package embark-consult)

;; The `wgrep' packages lets us edit the results of a grep search
;; while inside a `grep-mode' buffer. All we need is to toggle the
;; editable mode, make the changes, and then type C-c C-c to confirm
;; or C-c C-k to abort.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:9a3581df-ab18-4266-815e-2edd7f7e4852
(use-package wgrep
  :bind ( :map grep-mode-map
          ("e" . wgrep-change-to-wgrep-mode)
          ("C-x C-q" . wgrep-change-to-wgrep-mode)
          ("C-c C-c" . wgrep-finish-edit)))

;; The built-in `savehist-mode' saves minibuffer histories. Vertico
;; can then use that information to put recently selected options at
;; the top.
;;
;; Further reading: https://protesilaos.com/emacs/dotemacs#h:25765797-27a5-431e-8aa4-cc890a6a913a
(savehist-mode 1)



#+end_src
